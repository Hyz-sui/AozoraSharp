using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AozoraSharp.Generator;

[Generator]
public class SourceGenerator : ISourceGenerator
{
    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not SyntaxReceiver syntaxReceiver || syntaxReceiver.CustomConverters.Count <= 0)
        {
            return;
        }
        var converterFullNames = syntaxReceiver.CustomConverters.Select(customConverter =>
        {
            var typeDeclaration = customConverter.TypeDeclaration;
            var typeSymbol = context.Compilation.GetSemanticModel(typeDeclaration.SyntaxTree).GetDeclaredSymbol(typeDeclaration);
            return $"{typeSymbol.ContainingNamespace}.{typeSymbol.Name}";
        });
        // TODO: needs to be refactored
        var constructions = $"new {string.Join("(), new ", converterFullNames)}()";
        var generatedCode = GeneratedCodeFormat.Replace(ConstructionsSymbol, constructions);
        context.AddSource("ConverterRegistration.g.cs", generatedCode);

    }

    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
    }

    private sealed class SyntaxReceiver : ISyntaxReceiver
    {
        public HashSet<CustomConverterDeclaration> CustomConverters { get; } = [];

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is TypeDeclarationSyntax typeDeclarationSyntax && typeDeclarationSyntax.AttributeLists.Count > 0)
            {
                foreach (var attributeListSyntax in typeDeclarationSyntax.AttributeLists)
                {
                    foreach (var attribute in attributeListSyntax.Attributes)
                    {
                        if (attribute.Name.ToString() is "CustomJsonConverterAttribute" or "CustomJsonConverter")
                        {
                            CustomConverters.Add(new(typeDeclarationSyntax, attribute));
                            break;
                        }
                    }
                }
            }
        }
    }
    private readonly struct CustomConverterDeclaration(TypeDeclarationSyntax typeDeclaration, AttributeSyntax attribute)
    {
        public TypeDeclarationSyntax TypeDeclaration { get; } = typeDeclaration;
        public AttributeSyntax Attribute { get; } = attribute;
    }

    private const string GeneratedCodeFormat = $$"""
        // <auto-generated>
        // This is generated code. Do NOT modify it.
        // </auto-generated>
        using System.Collections.Generic;
        using System.Text.Json.Serialization;

        namespace AozoraSharp.Tools.JsonTools;

        partial class ConverterRegistration
        {
            internal static partial IList<JsonConverter> GetCustomConverters()
            {
                var converters = new List<JsonConverter>()
                {
                    {{ConstructionsSymbol}}
                };
                return converters;
            }
        }

    """;
    private const string ConstructionsSymbol = "[[[CONSTRUCTIONS]]]";
}
